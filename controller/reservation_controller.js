// controllers/reservationController.js

const pool = require("../config/db");
const moment = require("moment");
const { sendTelegramMessage } = require("../utils/sendtotelegram");
const { reservationSchema } = require("../validation/reservation.validator");

// ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏™‡∏∏‡πà‡∏° (6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
function generateRandomKey() {
  const chars =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let key = "";
  for (let i = 0; i < 6; i++) {
    key += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return key;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
// exports.createReservation = async (req, res) => {
//   const payload = Array.isArray(req.body) ? req.body : [req.body];
//   if (payload.length === 0) {
//     return res.status(400).json({ error: "No reservation data provided." });
//   }

//   let connection;
//   try {
//     connection = await pool.getConnection();
//     await connection.beginTransaction();

//     const results = [];
//     const now = moment();

//     for (const item of payload) {
//       // 1. Validate input
//       const { error, value } = reservationSchema.validate(item);
//       if (error) {
//         throw { status: 400, message: error.details[0].message };
//       }
//       const { user_id, room_id, date, start_time, end_time, description } =
//         value;

//       // 2. Prevent past reservations
//       const endDateTime = moment(`${date} ${end_time}`, "YYYY-MM-DD HH:mm");
//       if (endDateTime.isBefore(now)) {
//         throw { status: 400, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ" };
//       }

//       // 3. Check for conflicts (overlap)
//       const [conflicts] = await connection.query(
//         `SELECT 1 FROM reservation
//          WHERE room_id = ? AND date = ?
//            AND start_time < ?
//            AND end_time > ?
//          LIMIT 1`,
//         [room_id, date, end_time, start_time]
//       );
//       if (conflicts.length) {
//         throw {
//           status: 409,
//           message: "Reservation conflict!",
//           conflict: { room_id, date, start_time, end_time },
//         };
//       }

//       // 4. Insert reservation
//       const unlock_key = generateRandomKey();
//       const [insertResult] = await connection.query(
//         `INSERT INTO reservation
//          (user_id, room_id, date, start_time, end_time, unlock_key, sent_to_esp32, description, status_id)
//          VALUES (?, ?, ?, ?, ?, ?, 0, ?, 1)`,
//         [user_id, room_id, date, start_time, end_time, unlock_key, description]
//       );

//       const formattedDate = moment(date).format("YYYY-MM-DD");
//       results.push({
//         reservation_id: insertResult.insertId,
//         user_id,
//         room_id,
//         date: formattedDate,
//         start_time,
//         end_time,
//         unlock_key,
//         status: "pending",
//       });

//       // 5. Notify via Telegram (errors won't abort transaction)
//       try {
//         const [users] = await connection.query(
//           "SELECT username FROM users WHERE user_id = ?",
//           [user_id]
//         );
//         const username = users[0]?.username || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
//         const text = [
//           "üì¢ <b>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</b>",
//           `üë§ <b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</b> ${username}`,
//           `üè´ <b>‡∏´‡πâ‡∏≠‡∏á:</b> ${room_id}`,
//           `üìÖ <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${formattedDate}`,
//           `üïí <b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${start_time} - ${end_time}`,
//           `üìù <b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${description}`,
//           "<i>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</i>",
//         ].join("\n");
//         await sendTelegramMessage(text);
//       } catch (tgErr) {
//         console.warn("Telegram notification failed:", tgErr);
//       }
//     }

//     await connection.commit();
//     return res.status(201).json({
//       success: true,
//       message: "Reservations created successfully! Waiting for admin approval.",
//       data: results,
//     });
//   } catch (err) {
//     console.error("‚ùå createReservation error:", err);
//     if (connection) {
//       await connection.rollback();
//     }
//     if (err.status) {
//       return res
//         .status(err.status)
//         .json({
//           error: err.message,
//           ...(err.conflict && { conflict: err.conflict }),
//         });
//     }
//     return res.status(500).json({ error: "Server error" });
//   } finally {
//     if (connection) connection.release();
//   }
// };
// controller/reservation.controller.js (or wherever createReservation lives)

exports.createReservation = async (req, res) => {
  const payload = Array.isArray(req.body) ? req.body : [req.body];
  if (payload.length === 0) {
    return res.status(400).json({ error: "No reservation data provided." });
  }

  let connection;
  try {
    connection = await pool.getConnection();
    await connection.beginTransaction();

    const results = [];
    const now = moment();

    for (const item of payload) {
      // 1. Validate
      const { error, value } = reservationSchema.validate(item);
      if (error) throw { status: 400, message: error.details[0].message };
      const { user_id, room_id, date, start_time, end_time, description } =
        value;

      // 2. Prevent past
      const endDateTime = moment(`${date} ${end_time}`, "YYYY-MM-DD HH:mm");
      if (endDateTime.isBefore(now)) {
        throw { status: 400, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ" };
      }

      // 3. Conflict excluding cancelled (status_id=5)
      const [conflicts] = await connection.query(
        `SELECT 1 FROM reservation
         WHERE room_id = ? 
           AND date = ?
           AND status_id IN (1,2)       -- only pending or approved
           AND start_time < ?
           AND end_time > ?
         LIMIT 1`,
        [room_id, date, end_time, start_time]
      );
      if (conflicts.length) {
        throw {
          status: 409,
          message: "Reservation conflict!",
          conflict: { room_id, date, start_time, end_time },
        };
      }

      // 4. Insert
      const unlock_key = generateRandomKey();
      const [insertResult] = await connection.query(
        `INSERT INTO reservation
         (user_id, room_id, date, start_time, end_time, unlock_key, sent_to_esp32, description, status_id)
         VALUES (?, ?, ?, ?, ?, ?, 0, ?, 1)`,
        [user_id, room_id, date, start_time, end_time, unlock_key, description]
      );

      results.push({
        reservation_id: insertResult.insertId,
        user_id,
        room_id,
        date,
        start_time,
        end_time,
        unlock_key,
        status: "pending",
      });

      // 5. Notify Telegram
      try {
        const [[u]] = await connection.query(
          `SELECT username FROM users WHERE user_id = ?`,
          [user_id]
        );
        const username = u?.username || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
        const text = [
          "üì¢ <b>‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</b>",
          `üë§ <b>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</b> ${username}`,
          `üè´ <b>‡∏´‡πâ‡∏≠‡∏á:</b> ${room_id}`,
          `üìÖ <b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> ${date}`,
          `üïí <b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${start_time} - ${end_time}`,
          `üìù <b>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</b> ${description}`,
          "<i>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</i>",
        ].join("\n");
        await sendTelegramMessage(text);
      } catch (tgErr) {
        console.warn("Telegram notification failed:", tgErr);
      }
    }

    await connection.commit();
    return res.status(201).json({
      success: true,
      message: "Reservations created successfully! Waiting for admin approval.",
      data: results,
    });
  } catch (err) {
    console.error("‚ùå createReservation error:", err);
    if (connection) await connection.rollback();
    if (err.status) {
      return res.status(err.status).json({
        error: err.message,
        ...(err.conflict && { conflict: err.conflict }),
      });
    }
    return res.status(500).json({ error: "Server error" });
  } finally {
    if (connection) connection.release();
  }
};

// ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ô‡∏õ‡∏é‡∏¥‡∏ó‡∏¥‡∏ô
exports.getApprovedReservations = async (req, res) => {
  try {
    // SQL: ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (status_id = 2) ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏î‡πÜ
    const [rows] = await pool.query(
      `
      SELECT 
  r.reservation_id,
  r.room_id,
  rm.room_name,
  u.username AS reserved_by,
  r.description,
  r.date,
  r.start_time,
  r.end_time,
  /* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ä‡πá‡∏Å-‡∏≠‡∏¥‡∏ô‡πÄ‡∏•‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á */
  EXISTS (
    SELECT 1
    FROM room_logs l
    WHERE l.reservation_id = r.reservation_id
      AND l.action IN ('check_in','check_out')
  ) AS checked_any,
  /* ‡πÄ‡∏ß‡∏•‡∏≤ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Å-‡∏≠‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Å-‡πÄ‡∏≠‡∏≤‡∏ó‡πå) */
  (
    SELECT l2.check_time
    FROM room_logs l2
    WHERE l2.reservation_id = r.reservation_id
      AND l2.action IN ('check_in','check_out')
    ORDER BY l2.check_time DESC
    LIMIT 1
  ) AS check_time,
  /* action ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: check_in ‡∏´‡∏£‡∏∑‡∏≠ check_out */
  (
    SELECT l3.action
    FROM room_logs l3
    WHERE l3.reservation_id = r.reservation_id
      AND l3.action IN ('check_in','check_out')
    ORDER BY l3.check_time DESC
    LIMIT 1
  ) AS last_action
FROM reservation r
JOIN users u  ON r.user_id = u.user_id
JOIN room  rm ON r.room_id = rm.room_id
WHERE r.status_id = 2
  /* (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡πá‡πÄ‡∏≠‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ) */
  -- AND CONCAT(r.date,' ',r.end_time) >= NOW()
ORDER BY r.date, r.start_time
;
      `
    );

    // ‡πÅ‡∏õ‡∏•‡∏á checked_in ‡∏à‡∏≤‡∏Å 1/0 ‡πÄ‡∏õ‡πá‡∏ô boolean
    const formatted = rows.map((row) => ({
      reservation_id: row.reservation_id,
      room_id: row.room_id,
      room_name: row.room_name,
      username: row.reserved_by,
      description: row.description,
      date: moment(row.date).format("YYYY-MM-DD"),
      start_time: row.start_time,
      end_time: row.end_time,
      checked_in: row.checked_in === 1,
    }));

    return res.json({ success: true, data: formatted });
  } catch (err) {
    console.error("‚ùå getApprovedReservations error:", err);
    return res.status(500).json({ error: "Server error" });
  }
};
// statusDoor
exports.getApprovedReservationsaction = async (req, res) => {
  try {
    const now = moment().format("YYYY-MM-DD HH:mm:ss");

    const [rows] = await pool.query(
      `
         SELECT 
        r.reservation_id,
        r.room_id,
        rm.room_name,
        u.username AS reserved_by,
        r.description,
        r.date,
        r.start_time,
        r.end_time,
        /* ‡∏°‡∏µ check-in/check-out ‡πÑ‡∏´‡∏° */
        EXISTS (
          SELECT 1 
          FROM room_logs l
          WHERE l.reservation_id = r.reservation_id
            AND l.action IN ('check_in','check_out')
        ) AS checked_any,
        /* ‡πÄ‡∏ß‡∏•‡∏≤ log ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */
        (
          SELECT l2.check_time
          FROM room_logs l2
          WHERE l2.reservation_id = r.reservation_id
            AND l2.action IN ('check_in','check_out')
          ORDER BY l2.check_time DESC
          LIMIT 1
        ) AS check_time,
        /* action ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î */
        (
          SELECT l3.action
          FROM room_logs l3
          WHERE l3.reservation_id = r.reservation_id
            AND l3.action IN ('check_in','check_out')
          ORDER BY l3.check_time DESC
          LIMIT 1
        ) AS last_action
      FROM reservation r
      JOIN users u ON r.user_id = u.user_id
      JOIN room rm ON r.room_id = rm.room_id
      WHERE r.status_id = 2
        AND CONCAT(r.date, ' ', r.end_time) >= ?
      ORDER BY r.date ASC, r.start_time ASC
      `,
      [now]
    );

    // map ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡πâ‡∏ß convert checked_in ‡πÄ‡∏õ‡πá‡∏ô boolean
    const formatted = rows.map((row) => ({
      reservation_id: row.reservation_id,
      room_id: row.room_id,
      room_name: row.room_name,
      reserved_by: row.reserved_by,
      description: row.description,
      date: moment(row.date).format("YYYY-MM-DD"),
      start_time: row.start_time,
      end_time: row.end_time,
      checked_in: row.checked_in === 1,
      check_time: row.check_time, // e.g. "13:45:00"
      action: row.last_action || "none", // ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô "check_in" ‡∏´‡∏£‡∏∑‡∏≠ "check_out"
    }));

    return res.json({ success: true, data: formatted });
  } catch (err) {
    console.error("‚ùå getApprovedReservationsaction error:", err);
    return res.status(500).json({ error: "Server error" });
  }
};

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllRooms = async (req, res) => {
  try {
    const [rooms] = await pool.query(
      `SELECT room_id, room_name, description
       FROM room
       WHERE is_disabled = FALSE
       ORDER BY room_id`
    );
    return res.json({ success: true, data: rooms });
  } catch (error) {
    console.error("‚ùå getAllRooms error:", error);
    return res.status(500).json({ error: "Server error" });
  }
};
